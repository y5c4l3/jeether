diff --git a/src/zlib_ng/gzip_ng_threaded.py b/src/zlib_ng/gzip_ng_threaded.py
index 7fa7249..8a7e54a 100644
--- a/src/zlib_ng/gzip_ng_threaded.py
+++ b/src/zlib_ng/gzip_ng_threaded.py
@@ -98,11 +98,9 @@ class _ThreadedGzipReader(io.RawIOBase):
         self.exception = None
         self.buffer = io.BytesIO()
         self.block_size = block_size
-        # Using a daemon thread prevents programs freezing on error.
-        self.worker = threading.Thread(target=self._decompress, daemon=True)
+        self.worker = threading.Thread(target=self._decompress)
         self._closed = False
-        self.running = True
-        self.worker.start()
+        self.running = False

     def _check_closed(self, msg=None):
         if self._closed:
@@ -126,8 +124,19 @@ class _ThreadedGzipReader(io.RawIOBase):
                 except queue.Full:
                     pass

+    def _start(self):
+        if not self.running:
+            self.running = True
+            self.worker.start()
+
+    def _stop(self):
+        if self.running:
+            self.running = False
+            self.worker.join()
+
     def readinto(self, b):
         self._check_closed()
+        self._start()
         result = self.buffer.readinto(b)
         if result == 0:
             while True:
@@ -155,8 +164,7 @@ class _ThreadedGzipReader(io.RawIOBase):
     def close(self) -> None:
         if self._closed:
             return
-        self.running = False
-        self.worker.join()
+        self._stop()
         self.fileobj.close()
         if self.closefd:
             self.raw.close()
@@ -232,10 +240,9 @@ class _ThreadedGzipWriter(io.RawIOBase):
                 queue.Queue(queue_size) for _ in range(threads)]
             self.output_queues: List[queue.Queue[Tuple[bytes, int, int]]] = [
                 queue.Queue(queue_size) for _ in range(threads)]
-            # Using daemon threads prevents a program freezing on error.
-            self.output_worker = threading.Thread(target=self._write, daemon=True)
+            self.output_worker = threading.Thread(target=self._write)
             self.compression_workers = [
-                threading.Thread(target=self._compress, args=(i,), daemon=True)
+                threading.Thread(target=self._compress, args=(i,))
                 for i in range(threads)
             ]
         elif threads == 1:
@@ -243,7 +250,7 @@ class _ThreadedGzipWriter(io.RawIOBase):
             self.output_queues = []
             self.compression_workers = []
             self.output_worker = threading.Thread(
-                target=self._compress_and_write, daemon=True)
+                target=self._compress_and_write)
         else:
             raise ValueError(f"threads should be at least 1, got {threads}")
         self.threads = threads
@@ -254,7 +261,6 @@ class _ThreadedGzipWriter(io.RawIOBase):
         self.raw, self.closefd = open_as_binary_stream(filename, mode)
         self._closed = False
         self._write_gzip_header()
-        self.start()

     def _check_closed(self, msg=None):
         if self._closed:
@@ -277,21 +283,24 @@ class _ThreadedGzipWriter(io.RawIOBase):
         self.raw.write(struct.pack(
             "BBBBIBB", magic1, magic2, method, flags, mtime, os, xfl))

-    def start(self):
-        self.running = True
-        self.output_worker.start()
-        for worker in self.compression_workers:
-            worker.start()
+    def _start(self):
+        if not self.running:
+            self.running = True
+            self.output_worker.start()
+            for worker in self.compression_workers:
+                worker.start()

     def stop(self):
         """Stop, but do not care for remaining work"""
-        self.running = False
-        for worker in self.compression_workers:
-            worker.join()
-        self.output_worker.join()
+        if self.running:
+            self.running = False
+            for worker in self.compression_workers:
+                worker.join()
+            self.output_worker.join()

     def write(self, b) -> int:
         self._check_closed()
+        self._start()
         with self.lock:
             if self.exception:
                 raise self.exception
diff --git a/tests/test_gzip_ng_threaded.py b/tests/test_gzip_ng_threaded.py
index 7ed06de..1a0a5a8 100644
--- a/tests/test_gzip_ng_threaded.py
+++ b/tests/test_gzip_ng_threaded.py
@@ -105,6 +105,7 @@ def test_threaded_write_error(threads):
         threads=threads, block_size=8 * 1024)
     # Bypass the write method which should not allow blocks larger than
     # block_size.
+    f._start()
     f.input_queues[0].put((os.urandom(1024 * 64), b""))
     with pytest.raises(OverflowError) as error:
         f.close()